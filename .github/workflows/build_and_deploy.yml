name: build_and_deploy
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build'
        required: true
        default: 'main'
      tag_short_version:
        description: 'The short version of hoppscotch upstream, eg: use 23.8.1 instead of 2023.8.1'
        required: true
        default: '23.8.1'

env:
  APP_NAME: hoppscotch-app

jobs:
  build-depoly-files:
    name: Build depoly files for ${{ github.event.inputs.tag_short_version }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: 'Checkout and push specified tag version of hoppscotch'
        run: |
          git config --global pull.rebase false
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          cd hoppscotch
          git status
          git remote -v
          git fetch --all --tags
          git checkout tags/20${{ github.event.inputs.tag_short_version }}
          git status
          cd ..
          git add hoppscotch
          git commit -m "update hoppscotch to 20${{ github.event.inputs.tag_short_version }}"
          git tag ${{ github.event.inputs.tag_short_version }}
          git push
          git push --tag
      - name: 'Patch ExtensionStrategy.ts'
        run: |
          echo "original ExtensionStrategy.ts"
          cat hoppscotch/packages/hoppscotch-common/src/platform/std/interceptors/extension.ts
          cat postwoman_extension_hook_patch.txt >> hoppscotch/packages/hoppscotch-common/src/platform/std/interceptors/extension.ts
          echo "patched ExtensionStrategy.ts"
          cat hoppscotch/packages/hoppscotch-common/src/platform/std/interceptors/extension.ts
      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
      - name: 'Install the root tauri dependences'
        run: |
          yarn install
      - name: 'Install pnpm and dependencies '
        run: |
          npm install -g pnpm
          cp .env.example .env
          pnpm install
        working-directory: hoppscotch
      - name: 'Building'
        run: |
          pnpm run generate
        working-directory: hoppscotch
      - name: Prepare build files achive
        run: |
          7z a -tzip ${{env.APP_NAME}}-${{ github.event.inputs.tag_short_version }}.zip -r ./hoppscotch/packages/hoppscotch-selfhost-web/dist/*
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: hoppscotch-dist
          path: ${{env.APP_NAME}}-${{ github.event.inputs.tag_short_version }}.zip
      - name: 'Publish build files achive to release'
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{ github.event.inputs.tag_short_version }}
          file: ${{env.APP_NAME}}-${{ github.event.inputs.tag_short_version }}.zip
          tags: true
          draft: false
          overwrite: true

  build-native-executable:
    name: 'Build native executable'
    needs: [build-depoly-files]
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
            executable_extension: ''
          - os: 'macos-latest'
            label: 'macos'
            executable_extension: ''
          - os: 'windows-latest'
            label: 'windows'
            executable_extension: '.exe'
    runs-on: ${{matrix.os}}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/download-artifact@v2
        with:
          name: hoppscotch-dist
      - name: Extract hoppscotch-dist
        run: |
          rm -rf dist
          unzip ${{env.APP_NAME}}-${{ github.event.inputs.tag_short_version }}.zip -d dist
        shell: bash
      - name: Display structure of downloaded files
        run: ls -l . dist
      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
      - name: check toolchain version
        run: |
          node --version
          npm --version
          rustc --version
          cargo --version
      - name: 'Setup for linux'
        if: matrix.os == 'ubuntu-latest'
        run: |
          # https://ubuntu.com/blog/statement-on-32-bit-i386-packages-for-ubuntu-19-10-and-20-04-lts
          # https://askubuntu.com/questions/1252062/how-to-install-libncurses-so-5-in-ubuntu-20-04
          # https://askubuntu.com/questions/522372/installing-32-bit-libraries-on-ubuntu-14-04-lts-64-bit
          # sudo add-apt-repository universe
          sudo dpkg --add-architecture i386 
          sudo apt update
          # install both 32-bit and 64-bit prerequisites of tauri
          # libayatana-appindicator3-dev is the successor of libappindicator3-dev and 64-bit only
          # https://tauri.app/v1/guides/getting-started/prerequisites/#setting-up-linux
          # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
          echo FIX INSTALL FAILED ON GITHUB UBUNTU 22.04 RUNNER
          sudo apt install -y libgcc-s1:i386 libstdc++6:i386 libgdk-pixbuf-2.0-dev:i386 libgdk-pixbuf2.0-dev:i386 libatomic1:i386
          echo install tools for 32-bit support ...
          sudo apt install -y --allow-downgrades \
            gcc-multilib \
            g++-multilib
          echo install 32-bit dependences ...
          sudo apt install -y --allow-downgrades \
            libwebkit2gtk-4.0-dev:i386 \
            libssl-dev:i386 \
            libgtk-3-dev:i386 \
            librsvg2-dev:i386 || echo "install 32-bit dependences failed! Check the logs for details."
          echo install dependences ...
          sudo apt install -y --allow-downgrades \
            libwebkit2gtk-4.0-dev \
            libssl-dev \
            libgtk-3-dev \
            librsvg2-dev \
            libayatana-appindicator3-dev
          # use cross to build, so the dependencies are not required!
          # # check docker
          # docker -v
          # docker run -t --rm liudonghua123/cross:x86_64-unknown-linux-gnu-tauri ls -l /lib/x86_64-linux-gnu/
          # docker run -t --rm liudonghua123/cross:x86_64-unknown-linux-gnu-tauri pkg-config --list-all
          # docker run -t --rm liudonghua123/cross:x86_64-unknown-linux-gnu-tauri pkg-config --libs webkit2gtk-4.0
          echo 'ok'
      - name: 'Setup for macos'
        if: matrix.os == 'macos-latest'
        run: |
          echo 'ok'
      - name: 'Setup for windows'
        if: matrix.os == 'windows-latest'
        run: |
          # choco install visualstudio2019-workload-vctools
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#visual-studio-enterprise-2019
          echo 'ok'
      - name: Build Native binarys on ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu
          # install cross, use cross to build linux binarys
          # cargo install cross
          # # customization tauri.conf.json, runner: cross and distDir: dist
          # mv src-tauri/tauri.conf-linux.json src-tauri/tauri.conf.json
          # cat src-tauri/tauri.conf.json
          # cp -r dist src-tauri/dist
          # ls -l src-tauri/dist
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-unknown-linux-gnu -v -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_short_version }}\"}}"
          # check ERROR: Could not find dependency: libwebkit2gtk-4.0.so.37 
          # docker run -t --rm -v `pwd`/src-tauri:/src-tauri liudonghua123/cross:x86_64-unknown-linux-gnu-tauri ls -l src-tauri/target/x86_64-unknown-linux-gnu/release/hoppscotch-app src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/hoppscotch-app.AppDir/usr/bin/hoppscotch-app
          # docker run -t --rm -v `pwd`/src-tauri:/src-tauri liudonghua123/cross:x86_64-unknown-linux-gnu-tauri file src-tauri/target/x86_64-unknown-linux-gnu/release/hoppscotch-app src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/hoppscotch-app.AppDir/usr/bin/hoppscotch-app
          # docker run -t --rm -v `pwd`/src-tauri:/src-tauri liudonghua123/cross:x86_64-unknown-linux-gnu-tauri ldd src-tauri/target/x86_64-unknown-linux-gnu/release/hoppscotch-app src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/hoppscotch-app.AppDir/usr/bin/hoppscotch-app
          # (cd src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage && OUTPUT=hoppscotch-app_2.1.0_amd64.AppImage ./linuxdeploy-x86_64.AppImage --appimage-extract-and-run --appdir hoppscotch-app.AppDir --plugin gtk --output appimage -v0 || true)
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
          export PKG_CONFIG_SYSROOT_DIR=/
          yarn tauri build -t i686-unknown-linux-gnu -v -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_short_version }}\"}}"
          echo "build native binarys finished"
      - name: Build Native binarys on macos
        if: matrix.os == 'macos-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-apple-darwin -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_short_version }}\"}}"
          yarn tauri build -t aarch64-apple-darwin -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_short_version }}\"}}"
          echo "build native binarys finished"
      - name: Build Native binarys on windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc
          # if you use cmd shell, you should use call to execute yarn/mvn commands
          # if you pass some arguments contains quotes in powershell, you need to escape it!
          # see https://adamtheautomator.com/powershell-escape-double-quotes/, use '"string"' or "`"string`""
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-pc-windows-msvc -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_short_version }}\"}}"
          yarn tauri build -t i686-pc-windows-msvc -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_short_version }}\"}}"
          echo "build native binarys finished"
        shell: bash
      - name: Display structure of build files
        continue-on-error: true
        run: |
          ls -lR src-tauri/target/
        shell: bash

      # - name: Edit binary resources on windows
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     echo "edit binary resources"
      #     ".\resources\rcedit-x64.exe" build/${{env.APP_NAME}}${{matrix.executable_extension}} -set-icon resources/app_icon.ico -set-file-version ${{steps.environment.outputs.PROJECT_VERSION}} -set-product-version ${{steps.environment.outputs.PROJECT_VERSION}}  -set-version-string ProductName ${{env.APP_NAME}} -set-version-string LegalCopyright MIT
      #   shell: bash
      # - name: Prepare release files
      #   run: |
      #     7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{steps.environment.outputs.PROJECT_VERSION}}.zip -r ./build/*
      #   shell: bash

      # the directory structure of build files
      # linux
      # src-tauri/target/x86_64-unknown-linux-gnu/release/hoppscotch-app
      # src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/hoppscotch-app_2.1.0_amd64.AppImage
      # src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/hoppscotch-app_2.1.0_amd64.deb
      # macos
      # src-tauri/target/x86_64-apple-darwin/release/hoppscotch-app
      # src-tauri/target/x86_64-apple-darwin/release/bundle/macos/hoppscotch-app.app
      # src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/hoppscotch-app_2.1.0_x64.dmg
      # src-tauri/target/aarch64-apple-darwin/release/hoppscotch-app
      # src-tauri/target/aarch64-apple-darwin/release/bundle/macos/hoppscotch-app.app
      # src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/hoppscotch-app_2.1.0_aarch64.dmg
      # windows
      # src-tauri/target/x86_64-pc-windows-msvc/release/hoppscotch-app.exe
      # src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/hoppscotch-app_2.1.0_x64.msi
      # src-tauri/target/i686-pc-windows-msvc/release/hoppscotch-app.exe
      # src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/hoppscotch-app_2.1.0_x64.msi
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'ubuntu-latest'
        run: |
          # for 64-bit binary
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_amd64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_amd64.AppImage ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_amd64.AppImage
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_amd64.deb ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_amd64.deb
          # for 32-bit binary
          mv src-tauri/target/i686-unknown-linux-gnu/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_i386${{matrix.executable_extension}}
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_i386.AppImage ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_i386.AppImage
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/deb/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_i386.deb ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_i386.deb
        shell: bash
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'macos-latest'
        run: |
          mv src-tauri/target/x86_64-apple-darwin/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_x64.dmg ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64.dmg
          7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64.app.zip ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/${{env.APP_NAME}}.app
          mv src-tauri/target/aarch64-apple-darwin/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_aarch64${{matrix.executable_extension}}
          mv src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_aarch64.dmg ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_aarch64.dmg
          7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_aarch64.app.zip ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/${{env.APP_NAME}}.app
        shell: bash
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'windows-latest'
        run: |
          mv src-tauri/target/x86_64-pc-windows-msvc/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_x64_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64.msi
          mv src-tauri/target/i686-pc-windows-msvc/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x86${{matrix.executable_extension}}
          mv src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_short_version }}_x86_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x86.msi
        shell: bash
      - name: Display structure of build files
        run: |
          ls -l .
        shell: bash
        
      # files prepared to publish to release
      # platform executable
      ## ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}${{matrix.executable_extension}} 
      # linux bundles
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_amd64
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_amd64.AppImage 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_amd64.deb 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_i386
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_i386.AppImage 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_i386.deb 
      # macos bundles
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64.dmg 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64.app.zip 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_aarch64 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_aarch64.dmg 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_aarch64.app.zip 
      # windows bundles
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64.exe
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x64.msi
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x86.exe
      # ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}_x86.msi
      - name: 'Publish binary to release'
        continue-on-error: true
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{ github.event.inputs.tag_short_version }}
          file: ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_short_version }}*
          tags: true
          draft: false
          overwrite: true